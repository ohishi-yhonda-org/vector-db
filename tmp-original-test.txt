import { describe, it, expect, vi, beforeEach } from 'vitest'
import { VectorManager } from '../../../src/durable-objects/vector-manager'

// Mock the Agent class
vi.mock('agents', () => ({
  Agent: class {
    constructor(public ctx: any, public env: any) {
      this.state = {
        searchHistory: [],
        vectorJobs: {},
        fileProcessingJobs: {},
        recentVectors: []
      }
    }
    state: any
    setState(newState: any) {
      this.state = { ...this.state, ...newState }
    }
  }
}))

describe('VectorManager Durable Object', () => {
  // Mock Date.now to return incrementing values
  let mockDateNow = 1000000000000

  let vectorManager: VectorManager
  let mockCtx: any
  let mockEnv: any
  let mockVectorizeIndex: any
  let mockWorkflow: any
  let jobCounter = 0

  beforeEach(() => {
    vi.clearAllMocks()
    vi.spyOn(Date, 'now').mockImplementation(() => mockDateNow++)
    jobCounter = 0

    mockWorkflow = {
      id: 'workflow-123',
      status: vi.fn().mockResolvedValue({ status: 'complete' })
    }

    mockVectorizeIndex = {
      insert: vi.fn().mockResolvedValue(undefined),
      query: vi.fn().mockResolvedValue({
        matches: [{ id: 'vec-1', score: 0.95 }]
      }),
      getByIds: vi.fn().mockResolvedValue([
        { id: 'vec-1', values: [0.1, 0.2, 0.3], namespace: 'default', metadata: {} }
      ]),
      deleteByIds: vi.fn().mockResolvedValue({ count: 1 }),
      upsert: vi.fn().mockResolvedValue(undefined)
    }

    mockEnv = {
      VECTORIZE_INDEX: mockVectorizeIndex,
      EMBEDDINGS_WORKFLOW: {
        create: vi.fn().mockResolvedValue({
          id: 'embedding-workflow-123'
        }),
        get: vi.fn().mockResolvedValue({
          status: vi.fn().mockResolvedValue({
            status: 'complete',
            output: {
              success: true,
              embedding: [0.1, 0.2, 0.3],
              model: '@cf/baai/bge-base-en-v1.5'
            }
          })
        })
      },
      VECTOR_OPERATIONS_WORKFLOW: {
        create: vi.fn().mockResolvedValue({
          id: 'workflow-123',
          status: vi.fn().mockResolvedValue({ 
            status: 'complete',
            output: {
              success: true,
              vectorId: 'vec-123'
            }
          })
        }),
        get: vi.fn().mockResolvedValue({
          id: 'workflow-123',
          status: vi.fn().mockResolvedValue({ 
            status: 'complete',
            output: {
              success: true,
              vectorId: 'vec-123'
            }
          })
        })
      },
      FILE_PROCESSING_WORKFLOW: {
        create: vi.fn().mockResolvedValue(mockWorkflow),
        get: vi.fn().mockResolvedValue(mockWorkflow)
      },
      DEFAULT_EMBEDDING_MODEL: '@cf/baai/bge-base-en-v1.5'
    }

